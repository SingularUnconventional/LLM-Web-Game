
.
├── public/                 # 웹 서버가 클라이언트에게 직접 제공하는 모든 정적 파일들을 모아두는 디렉토리입니다.
│   ├── index.html          # 게임의 유일한 진입점 HTML 파일입니다. SPA(Single Page Application) 방식으로 동작하며,
│                           # 모든 프론트엔드 JavaScript 번들이 이 파일에 로드됩니다.
│   ├── assets/             # 이미지, 오디오, 폰트 등 게임에 필요한 모든 정적 자원들을 저장하는 디렉토리입니다.
│   │   ├── images/         # 게임 배경 이미지, UI 아이콘, 기본 이펙트 이미지 등 고정된 이미지 파일들입니다.
│   │   │   ├── background_start.webp # 시작 화면 배경 이미지 (웹 최적화 포맷 권장)
│   │   │   ├── ui_button_start.svg   # '시작하기' 버튼 아이콘
│   │   │   ├── icon_emotion_sparkle.svg # 감정 조각 생성 시 나타나는 아이콘
│   │   │   └── ...                   # 기타 고정 UI 요소 및 이펙트 이미지
│   │   ├── audio/          # 게임 내 모든 오디오 파일 (배경 음악, 효과음 등)입니다.
│   │   │   ├── BGM_calm_loop.mp3     # 시작 화면 및 잔잔한 분위기의 배경 음악
│   │   │   ├── SFX_typing_chat.mp3   # 채팅 메시지 타이핑 효과음
│   │   │   ├── SFX_emotion_collect.mp3 # 감정 조각 획득 시 효과음
│   │   │   └── ...                   # 기타 오디오 파일
│   │   └── fonts/          # 웹 폰트 파일들입니다. 사용자 경험을 위해 커스텀 폰트 사용 시 이곳에 저장합니다.
│   │       ├── NotoSansKR-Regular.woff2
│   │       └── ...
│   └── style.css           # 전역적으로 적용되는 최소한의 기본 스타일 또는 CSS Reset 스타일을 포함합니다.
│                           # 대부분의 컴포넌트별 스타일은 `src/styles`에서 모듈화하여 관리하는 것을 권장합니다.
│
├── src/                    # 클라이언트 측(프론트엔드) 애플리케이션의 모든 소스 코드입니다.
│   ├── main.js             # 프론트엔드 애플리케이션의 주 진입점 파일입니다. (예: React `index.js`, Vue `main.js`)
│                           # 여기서 React/Vue 앱을 마운트하고, 전역 Provider (Context/Redux store)를 설정합니다.
│   ├── App.js              # (예: React) 애플리케이션의 최상위 컴포넌트입니다. 전역 레이아웃 및 클라이언트 라우팅 설정이 포함됩니다.
│   ├── components/         # 재사용 가능한 UI 컴포넌트들을 정의하는 디렉토리입니다. 기능별로 하위 디렉토리를 만들어 관리합니다.
│   │   ├── common/         # 여러 컴포넌트에서 공통으로 사용되는 작은 단위의 재사용 가능한 컴포넌트들입니다.
│   │   │   ├── Button.js       # 범용 버튼 컴포넌트
│   │   │   ├── Modal.js        # 모달 팝업 컴포넌트
│   │   │   └── LoadingSpinner.js # 로딩 스피너 컴포넌트
│   │   ├── StartScreen/      # 게임 시작 화면 관련 컴포넌트들입니다.
│   │   │   ├── StartScreen.js
│   │   │   └── StartScreen.module.css
│   │   ├── PsychologyTest/   # 심리 테스트 화면 관련 컴포넌트들입니다.
│   │   │   ├── PsychologyTest.js   # 심리 테스트 질문 및 선택지 렌더링 로직
│   │   │   ├── QuestionCard.js     # 각 질문 카드 컴포넌트
│   │   │   └── PsychologyTest.module.css
│   │   ├── ChatInterface/    # 게임 내 채팅 인터페이스 관련 컴포넌트들입니다.
│   │   │   ├── ChatInterface.js    # 전체 채팅창 레이아웃 및 메시지 흐름 제어
│   │   │   ├── MessageBubble.js    # 캐릭터/플레이어 메시지 버블 컴포넌트
│   │   │   ├── InputArea.js        # 플레이어 메시지 입력 영역 및 선택지 버튼
│   │   │   └── ChatInterface.module.css
│   │   ├── CharacterDisplay/ # 동적으로 생성된 캐릭터 이미지와 정보를 표시하는 컴포넌트입니다.
│   │   │   ├── CharacterDisplay.js # 캐릭터 이미지와 이름, 간략한 상태 등을 보여줌
│   │   │   └── CharacterDisplay.module.css
│   │   ├── EmotionLog.js       # 캐릭터의 감정 변화 및 대화 내용을 기록하는 '감정 로그' 다이어리 컴포넌트입니다.
│   │   ├── CharacterProfileCard.js # 현재 대화 중인 캐릭터의 상세 프로필(기본 정보, 고민 키워드)을 표시하는 컴포넌트입니다.
│   │   ├── PersonaDisplay.js   # 엔딩에서 플레이어의 '상징적 자아'와 수집한 감정 조각을 전시하는 컴포넌트입니다.
│   │   └── ...                 # 기타 게임 내 UI 컴포넌트들
│   ├── pages/              # 게임의 주요 화면 또는 페이지 단위의 컴포넌트들을 정의하는 디렉토리입니다. (주로 라우팅과 연결됩니다)
│   │   ├── HomePage.js         # "지금, 당신의 마음과 연결할 준비가 되셨나요?" 시작 및 인트로 화면
│   │   ├── GamePlayPage.js     # 캐릭터와 채팅하며 게임이 진행되는 핵심 플레이 화면
│   │   ├── EndingPage.js       # 모든 조각 수집 후 최종 페르소나 완성 및 에필로그 화면
│   │   ├── EmotionLogPage.js   # 수집된 감정 로그 전체를 열람할 수 있는 페이지
│   │   └── PersonaCollectionPage.js # 수집한 감정 조각 도감을 확인할 수 있는 페이지
│   ├── hooks/              # React Hooks와 같이 재사용 가능한 로직을 캡슐화하는 커스텀 훅 디렉토리입니다.
│   │   ├── useChatScroll.js    # 채팅창 자동 스크롤을 관리하는 훅
│   │   ├── useGameState.js     # 현재 게임의 전반적인 상태(진행도, 현재 캐릭터, 감정 변화 등)를 관리하는 훅
│   │   └── useAudio.js         # 배경 음악 및 효과음 재생을 제어하는 훅
│   ├── contexts/           # 전역 상태 관리를 위한 Context API (또는 Redux/Zustand store) 정의 디렉토리입니다.
│   │   ├── GameContext.js      # 현재 게임 진행 상황, 캐릭터 정보, 대화 이력 등을 전역으로 관리하는 컨텍스트
│   │   └── UserContext.js      # 로그인된 사용자 정보, 수집한 페르소나 조각 등 사용자 고유 데이터를 관리하는 컨텍스트
│   ├── utils/              # 다양한 유틸리티 함수 및 헬퍼 함수를 모아둔 디렉토리입니다.
│   │   ├── api.js          # 백엔드 API와의 통신을 담당하는 함수들 (fetch, axios 등을 래핑하여 사용)
│   │   ├── gameLogic.js    # 프론트엔드에서 처리되는 게임 로직 (예: UI 상의 감정 조각 생성 조건 확인, 낮/밤 UI 전환 로직)
│   │   ├── textEffects.js  # 채팅 메시지 타이핑 효과, 텍스트 딜레이 등 텍스트 관련 시각/청각 효과 함수
│   │   └── constants.js    # 게임 내 사용되는 고정 상수값 (예: 감정 단어 목록, UI 애니메이션 시간)
│   ├── data/               # 게임 내 사용되는 정적 데이터 파일들 (주로 JSON 형식)입니다.
│   │   ├── characterTemplates.json # Gemini가 캐릭터를 생성할 때 참조할 기본 캐릭터 구조 및 속성 템플릿입니다.
│   │                               # 고정된 캐릭터 정보가 아닌, '이름', '외형 특징', '고민 유형' 등의 정의를 포함합니다.
│   │   ├── psychologyQuestions.json # 심리 테스트 질문과 가능한 선택지 데이터입니다.
│   │   └── emotionPieces.json       # 획득 가능한 감정 조각들의 이름, 비유적 표현, 해설 정보입니다.
│   ├── styles/             # 컴포넌트별 또는 모듈별 스타일시트들을 관리하는 디렉토리입니다. (CSS Modules, Styled Components, Sass/Less 등)
│   │   ├── _variables.scss # Sass/Less 사용 시 전역 변수 정의 (색상 팔레트, 폰트 사이즈, 간격 등)
│   │   ├── _mixins.scss    # Sass/Less 사용 시 재사용 가능한 믹스인 정의
│   │   ├── base.scss       # 프로젝트 전반에 걸친 기본 스타일 (폰트 패밀리, 링크 스타일, 리셋 등)
│   │   └── components/     # 각 컴포넌트에 해당하는 스타일 파일들을 모아둡니다.
│   │       ├── chat.module.scss
│   │       ├── button.module.scss
│   │       └── ...
│   └── routes/             # 클라이언트 사이드 라우팅 정의 파일입니다. (예: React Router Dom 설정)
│       └── index.js        # 모든 클라이언트 라우트 정의
│
├── server/                 # 서버 측(백엔드) 애플리케이션의 모든 소스 코드입니다. (Node.js + Express 예시)
│   ├── app.js              # 서버 애플리케이션의 주 진입점 파일입니다. Express 앱을 초기화하고,
│                           # 미들웨어(CORS, JSON 파서 등)를 설정하며, 모든 라우트를 연결합니다.
│   ├── routes/             # 클라이언트의 요청을 처리할 API 엔드포인트들을 정의하는 디렉토리입니다.
│   │   ├── auth.js         # 사용자 인증(회원가입, 로그인 등) 관련 API 라우트입니다. (필요 시)
│   │   ├── psychology.js   # 심리 테스트 결과 제출 및 **캐릭터/이미지 생성 요청**을 처리하는 API 라우트입니다.
│   │   ├── game.js         # 게임 진행 상태(세션) 저장, 로드, 업데이트 등 게임 플레이 관련 API 라우트입니다.
│   │   ├── chat.js         # 클라이언트로부터의 채팅 메시지를 받아 **Gemini API로 전달하고 응답을 반환**하는 API 라우트입니다.
│   │   ├── characters.js   # 동적으로 생성된 캐릭터 정보(페르소나, 이미지 ID 등)를 조회하는 API 라우트입니다.
│   │   └── images.js       # (선택적) Gemini Image Generation으로 생성된 이미지를 안전하게 서빙하는 API 라우트입니다.
│   │                       # (ex: /api/images/:contentId 로 요청 시 해당 이미지 반환)
│   ├── models/             # 데이터베이스 스키마 및 모델을 정의하는 디렉토리입니다. (예: Mongoose, Sequelize ORM 사용)
│   │   ├── User.js         # 사용자 정보(ID, 수집한 페르소나 조각 목록, 진행 중인 게임 세션 ID 등)
│   │   ├── GameSession.js  # 각 캐릭터별 게임 진행 상태, 대화 이력, 감정 변화,
│   │                       # **현재 대화 중인 캐릭터의 페르소나 데이터와 생성된 이미지의 `content_id`**를 포함합니다.
│   │   └── EmotionPiece.js # 획득한 감정 조각의 상세 정보(이름, 해설, 소속 캐릭터 정보 등)
│   ├── controllers/        # 각 라우트 핸들러의 실제 비즈니스 로직을 담는 디렉토리입니다.
│   │   ├── authController.js       # 사용자 인증 로직 (토큰 발행, 검증 등)
│   │   ├── psychologyController.js # 심리 테스트 결과 처리, **Gemini를 통한 캐릭터 및 이미지 생성 로직을 호출**
│   │   ├── gameController.js       # 게임 세션 데이터 조회, 저장, 업데이트 로직
│   │   ├── chatController.js       # 클라이언트 메시지 수신, **Gemini Service를 통한 대화 응답 생성 로직 호출**, 응답 반환
│   │   ├── characterController.js  # 특정 캐릭터 정보 조회 (사용자별 맞춤 캐릭터)
│   │   └── imageController.js      # (선택적) `image_generation` 툴로 생성된 이미지를 안전하게 로드하여 클라이언트에 제공
│   ├── services/           # 외부 API 연동 또는 복잡한 비즈니스 로직을 캡슐화하는 서비스 계층 디렉토리입니다.
│   │   ├── geminiService.js    # **가장 핵심적인 서비스 파일입니다.**
│   │   │                       # 1. **캐릭터 페르소나 및 이미지 생성:** 심리 테스트 결과를 바탕으로 Gemini API를 사용하여
│   │   │                       #    캐릭터의 성격, 고민, 외형 특징 등을 분석하고, `image_generation` 툴을 호출하여
│   │   │                       #    해당 캐릭터 이미지를 생성하는 로직을 포함합니다.
│   │   │                       # 2. **대화 응답 생성:** 사용자의 채팅 메시지, 캐릭터의 현재 감정 상태 및 과거 대화 맥락을
│   │   │                       #    바탕으로 Gemini API에 최적화된 프롬프트를 구성하고, 대화 응답을 받아 처리합니다.
│   │   │                       #    (예: 캐릭터의 말투, 이모티콘 사용 여부 등을 Gemini에게 지시)
│   │   ├── gameService.js      # 게임 진행 로직(낮/밤 루프 관리, 감정 조각 생성 조건 판단, 캐릭터 감정 진척도 계산)의 서버 측 구현
│   │   └── authService.js      # 사용자 인증 및 권한 관련 비즈니스 로직
│   ├── config/             # 서버 환경 설정 파일들을 모아둔 디렉토리입니다.
│   │   ├── db.js           # 데이터베이스 연결 설정 (예: MongoDB URI, SQL 연결 정보)
│   │   ├── gemini.js       # Gemini API 설정 (API 키 로드, 사용할 모델 ID, 이미지 생성 관련 설정 등)
│   │   └── cors.js         # CORS (Cross-Origin Resource Sharing) 설정
│   └── utils/              # 서버 측에서 사용되는 공통 유틸리티 함수들입니다.
│       ├── errorHandler.js # 전역 에러 처리 미들웨어 또는 함수
│       └── logger.js       # 서버 측 로깅 유틸리티 (개발/운영 환경 로그 관리)
│
├── .env                    # 환경 변수 파일입니다. 데이터베이스 URI, 서버 포트, Gemini API 키 등
│                           # 외부에 노출되어서는 안 되는 민감한 정보들을 여기에 저장합니다.
│                           # 이 파일은 `.gitignore`에 반드시 추가하여 Git 저장소에 포함되지 않도록 합니다.
│   # 예시:
│   # PORT=5000
│   # MONGODB_URI=mongodb://localhost:27017/dream_game
│   # GEMINI_API_KEY=YOUR_GEMINI_API_KEY_HERE
│
├── .gitignore              # Git 버전 관리에서 제외할 파일 및 폴더를 지정합니다.
│                           # `node_modules/`, `.env`, 빌드 결과물(`build/` 또는 `dist/`) 등이 포함됩니다.
├── package.json            # 프로젝트의 메타데이터, 의존성 패키지 목록, 실행 스크립트 등을 정의하는 파일입니다.
│                           # (프론트엔드와 백엔드의 의존성을 단일 파일에서 관리하는 방식)
├── package-lock.json       # `package.json`에 명시된 의존성들의 정확한 버전을 기록하는 파일입니다.
│                           # 팀원 간 개발 환경 일치 및 배포 시 안정성을 보장합니다.
├── README.md               # 프로젝트에 대한 설명, 설치 및 실행 방법, 주요 기능, 기여 방법 등을 기술하는 문서입니다.
└── tsconfig.json           # (TypeScript 사용 시) TypeScript 컴파일러 설정 파일입니다.