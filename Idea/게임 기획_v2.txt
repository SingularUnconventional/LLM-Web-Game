************
**핵심 게임 구조**

처음에는 로그인 화면. 그리고 회원가입을 한 후 처음으로 로그인을 한다면 상담 인공지능이랑 간단한 상담이 진행돼. 상담은 10턴에서 50턴 사이에 끝나. 그리고 상담이 끝나면 상담 분석 인공지능이 상담 로그를 분석하여 분석 데이터를 만들지. 게임 참여도 같은 메타정보를 분석하기도 해.
그리고 상담이 끝나면 바로 이야기가 시작돼. idea의 게임 기획에 있듯 기본적인 컨셉은 꿈이야. 동화 속 평범한 캐릭터는 먼저 말을 건내. 말은 독백 형태가 될 수도 있고, 사용자를 발견하고 사용자에게 말을 건낼수도 있지. 또한 첫 말도 로그에 포함돼.
처음 캐릭터는 고정이야. 캐릭터 생성 인공지능이 개입하지 않아. 첫 캐릭터는 번데기가 되기 싫은 에벌레로 하자. 설득을 시킬 수도 있고, 어짜피 번데기가 될 것이기 때문에 위로하거나 무시할 수도 있지. 이 캐릭터는 무조건 2일 차 밤까지 대화할 수 있고, 3일 차 아침에는 번데기가 되기 때문에 이야기가 끝나.
이렇게 이야기가 끝나면 요약 인공지능의 요약 내용을 캐릭터 카드가 만들어져. 캐릭터 카드에는 이미지, 성격, 고민, 결말이 간략하게 요약되어 있어. 또한 감정 조각도 생기는데 이 감정 조각은 고민과 결말을 감정 조각 추출 인공지능이 분석하여 가장 어울리는 감정 키워드를 추출함으로서 생성돼.
그리고 다시 밤이 되면 플레이어 분석 데이터를 업데이트해. 기존 플레이어 분석 데이터와 이전 캐릭터 대화 로그를 바탕으로 플레이어 분석 데이터를 업데이트하지. 세 번째 부터는 질문 목록에 답변한 내용도 분석에 추가해. 이후 이 분석 데이터에서 핵심 요소를 추출해. 분석과 요소 추출은 한 인공지능에서 한번에 진행돼. 두 번째 캐릭터는 가장 확실하고 일반적이며 가벼운 요소(사고 싶은 물건이 있는데 돈이 부족하다 등)를 추출하고, 점점 갈수록 깊고 플레이어와 가까운 요소를 추출해야 해. 그러니깐 입력 값에는 현재 게임 진행도도 있으면 좋겠지.
이게 이렇게 뽑아낸 요소를 바탕으로 캐릭터 생성 인공지능이 이야기와 캐릭터를 만들어. 캐릭터는 문제가 명확해야하고, 문제 해결에 최소 2일에서 최대 7일 정도 걸리지. 물론 플레이어의 말에 따라 달라질 수 있어. 캐릭터는 비현실적이지만 무겁지 않은 동화같은 세계에 살아. 세계는 추상적이지 않고 구체적이야. 캐릭터와 문제도 구체적이지.(신 포도를 따 먹고 싶어하는 여우, 산타클로스 섬에 사는 선물을 포장하는 난쟁이 등.). 사용자의 요소를 동화적으로 전환해서 바로 눈치챌 수 없게 만들어야 해.(사고 싶은 물건이 있는데 돈이 부족하다. -> 높은 곳에 있는 잎을 먹고 싶은 목 짧은 기린.)
이렇게 캐릭터를 생성하면 이 정보를 바탕으로 프로필 이미지 생성 인공지능이 이미지를 생성해. 물론 이미지 생성도 gemini가 할 수 있으면 좋겠어. 이미지는 흰색 배경에 얼굴이 클로즈업되어 프로필 사진처럼 보이는 이미지야. 그리고 이미지를 받으면 도트 변환 알고리즘을 활용하여 도트로 변환시켜. 색을 제한하여 분위기를 일정하게 만들 수 있지. 이렇게 도트로 변환시킨 이미지를 캐릭터 정보에 저장하는거야. 나중에 캐릭터 카드에 추가되기도 해.
간단한 질문 목록에서 이렇게 분석 데이터 업데이트, 캐릭터 생성 등의 과정이 진행되는 동안 화면에는 질문 목록에서 뽑힌 질문 5개가 제공돼. 대기 시간에 심심함을 줄이면서 자연스럽게 심리에 대한 추가 정보를 모으려는 전략이지. 질문은 문장구상형(무인도에 무엇이든 딱 하나만 챙길 수 있다면?), 빈칸채우기형(가장 받고 싶은 선물은 __이다.) 등이 있어.
이렇게 질문 목록에서 답변을 완료하고 생성도 완료된다면 새로운 밤이 시작되는거지.
또한 시간 스킵기능이 있어. 대화 도중에는 불가능하고, 그날 밤의 대화가 완전히 종료되면 아침으로 스킵하지. 또한 아침은 특정 시간(1시간.) 후에 스킵을 사용할 수 있어.
화면은 기본적으로 채팅 창이 메인이야. 또한 상단에는 게임 시간과 며칠 차인지 나타나 있어. 대화 로그도 이 시간을 기반으로 저장하지.
상단에 시간 아래에는 기억 조각들이 가로로 길게 놓여져 있어. 총 10개를 모아야 하지. 클릭하거나 마우스를 가져다대면 기억의 이름이 보여.
그리고 우상단에는 메뉴 창이 있어. 이걸 눌러서 지금까지 대화했던 캐릭터 카드를 확인해볼 수 있지. 또한 원한다면 상담을 진행할 수 있게 만들어. 이 상담은 턴 수 제한이 없고, 대화 로그가 계속 누적돼. 이 상담 데이터는 캐릭터 대화 로그를 바탕으로 플레이어 분석 데이터를 업데이트해서 요소를 추출하기 전에 플레이어 분석 데이터에 업데이트돼. 이 상담 분석 인공지능은 처음 상담 분석 인공지능과 다르고, 이 상담 인공지능은 처음 상담 인공지능과 달라.
이렇게 아홉 번 째 캐릭터까지 클리어하고, 아침을 보내 밤이 온다면 마지막 캐릭터를 생성할 때 플레이어의 페르소나를 생성해. 이 캐릭터 생성 인공지능은 이전 캐릭터 생성 인공지능과 달라. 이전 캐릭터와의 대화 로그를 읽어 말투까지 모방하지.
그리고 페르소나의 핵심 고민이나 문제를 해결하는 즉 자신의 문제를 해결하는 행위를 마지막으로 이야기를 끝내. 물론 그 페르소나가 플레이어라는걸 대놓고 자랑하는건 좋지 않아. 이렇게 이야기가 끝나면 모든 대화가 불가능해. 오직 캐릭터 카드만 볼 수 있지.

디자인은 전체적으로 따뜻하면서 몽환적이고 동화적인 디자인이면 좋겠어. 꿈과 동화가 키워드이고 전체적으로 파스텔 톤인거지. 또한 밤과 낮에 ui 색이 완전히 다르면 좋겠어. 직접적으로 낮과 밤이 느껴지는거지.

시스템적인 추가 사항. 캐릭터 생성 인공지능이 생성하는 정보는 캐릭터 프롬포트의 하위 요소이다. 캐릭터 프롬포트는 서식 규칙, 금지 항목, 입력 밎 출력 형식 등 모든 캐릭터가 공통적으로 가지는 챗봇 프롬포트를 포함하고 있어.
************


### **1단계: 프로젝트 구조 및 데이터베이스 리모델링**

기존 구조를 최대한 활용하되, 새로운 게임 로직을 담을 수 있도록 모델을 재설계하고 추가합니다.

**수정/추가될 모델 (`server/models/`):**

*   **`User.ts`**:
    *   `playerAnalysis: JSON` 필드를 추가합니다. 플레이어 분석 데이터가 저장됩니다. (초기값은 null)
    *   `completedCharacterCount: number` 필드를 추가합니다. 클리어한 캐릭터 수를 추적합니다.
*   **`Character.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `name: string`
    *   `description: string` (캐릭터 설명 및 배경 이야기)
    *   `problem: string` (캐릭터의 핵심 고민)
    *   `personality: string`
    *   `initialDialogue: string` (캐릭터의 첫 대사)
    *   `originalImageUrl: string` (Gemini 생성 원본 이미지 URL)
    *   `pixelatedImageUrl: string` (도트 변환 이미지 URL)
    *   `isFixed: boolean` (고정 캐릭터 여부, 예: 애벌레)
    *   `isFinalPersona: boolean` (최종 페르소나 여부)
    *   `createdAt: Date`
*   **`ConversationLog.ts` (신규 생성)**:
    *   `characterId: string` (FK to Character)
    *   `speaker: 'user' | 'character'`
    *   `message: string`
    *   `timestamp: Date`
    *   `gameDay: number` (게임 내 날짜)
*   **`CharacterCard.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `characterId: string` (FK to Character)
    *   `summary: string` (AI 요약 내용)
    *   `outcome: string` (결말)
    *   `pixelatedImageUrl: string`
*   **`EmotionPiece.ts` (기존 모델 수정 또는 신규 생성)**:
    *   `characterCardId: string` (FK to CharacterCard)
    *   `keyword: string` (추출된 감정 키워드)
*   **`CounselingLog.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `speaker: 'user' | 'ai'`
    *   `message: string`
    *   `timestamp: Date`
*   **`PsychologyAnswer.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `question: string`
    *   `answer: string`
*   **`GameState.ts` (GameSession.ts 대체 또는 대폭 수정)**:
    *   `userId: string` (FK to User)
    *   `currentDay: number`
    *   `timeOfDay: 'day' | 'night'`
    *   `activeCharacterId: string | null` (현재 대화 중인 캐릭터)
    *   `lastInteractionTime: Date` (시간 스킵 기능에 사용)

### **2단계: AI 모델 및 프롬포트 설계**

게임의 핵심인 AI 모델의 역할과 프롬포트를 명확히 정의합니다. `server/prompts/` 폴더에 프롬포트 템플릿을 저장하고 `server/services/geminiService.ts`에서 각 모델을 호출하는 함수를 구현합니다.

*   **`[AI-CORE] 캐릭터 프롬포트 코어 템플릿`**: 모든 캐릭터 AI가 공유하는 기본 규칙, 서식, 금지 항목 등을 정의합니다.
*   **`[AI-1] 최초 상담 AI`**:
    *   **역할**: 신규 유저와 10~50턴 간의 초기 심리 상담 진행.
    *   **입력**: 없음.
    *   **출력**: 상담 대화.
*   **`[AI-2] 최초 상담 분석 AI`**:
    *   **역할**: `[AI-1]`의 상담 로그를 분석하여 초기 `playerAnalysis` 데이터 생성.
    *   **입력**: 최초 상담 로그.
    *   **출력**: JSON 형태의 플레이어 분석 데이터 (성향, 주요 관심사, 가치관 등).
*   **`[AI-3] 캐릭터 대화 AI`**:
    *   **역할**: 생성된 캐릭터가 되어 플레이어와 대화.
    *   **입력**: `[AI-CORE]` + 개별 캐릭터 정보(성격, 고민, 배경) + 대화 로그.
    *   **출력**: 캐릭터의 다음 대사.
*   **`[AI-4] 대화 요약 AI`**:
    *   **역할**: 종료된 캐릭터와의 대화 로그를 요약하여 캐릭터 카드 정보 생성.
    *   **입력**: 한 캐릭터와의 전체 대화 로그.
    *   **출력**: 캐릭터의 성격, 고민, 결말에 대한 간략한 요약.
*   **`[AI-5] 감정 조각 추출 AI`**:
    *   **역할**: `[AI-4]`의 결과물(고민, 결말)을 바탕으로 가장 핵심적인 감정 키워드 1~2개 추출.
    *   **입력**: 요약된 고민과 결말 텍스트.
    *   **출력**: 감정 키워드 (예: "아쉬움", "성취감").
*   **`[AI-6] 플레이어 심층 분석 AI`**:
    *   **역할**: 기존 분석 데이터, 이전 캐릭터 대화 로그, 심리 질문 답변을 종합하여 `playerAnalysis`를 업데이트하고, 다음 캐릭터 생성을 위한 핵심 요소 추출.
    *   **입력**: 기존 `playerAnalysis` 데이터, 최근 대화 로그, 심리 질문 답변 목록, 현재 게임 진행도(n일차).
    *   **출력**: 1. 업데이트된 `playerAnalysis` JSON. 2. 다음 캐릭터의 핵심 요소(problem) 텍스트.
*   **`[AI-7] 동화 캐릭터 생성 AI`**:
    *   **역할**: `[AI-6]`이 추출한 핵심 요소를 동화적 상상력으로 변환하여 새로운 캐릭터 생성.
    *   **입력**: 캐릭터 핵심 요소.
    *   **출력**: 캐릭터 정보(이름, 설명, 고민, 성격, 첫 대사) JSON.
*   **`[AI-8] 프로필 이미지 생성 AI`**:
    *   **역할**: 생성된 캐릭터 정보를 바탕으로 프로필 이미지 생성.
    *   **프롬포트**: "A close-up portrait of [캐릭터 설명], simple fairy tale illustration style, plain white background, facing forward."
    *   **출력**: 이미지 URL.
*   **`[AI-9] 수시 상담 AI`**:
    *   **역할**: 유저가 원할 때 언제든 진행하는 상담. 턴 수 제한 없음.
    *   **입력**: 이전 수시 상담 로그.
    *   **출력**: 상담 대화.
*   **`[AI-10] 수시 상담 분석 AI`**:
    *   **역할**: `[AI-9]`의 로그를 분석하여 `playerAnalysis` 데이터에 추가. `[AI-2]`와 유사하지만, 기존 데이터에 정보를 추가/갱신하는 방식.
    *   **입력**: 수시 상담 로그, 기존 `playerAnalysis` 데이터.
    *   **출력**: 업데이트된 `playerAnalysis` JSON.
*   **`[AI-11] 최종 페르소나 생성 AI`**:
    *   **역할**: 9번째 캐릭터 클리어 후, 모든 데이터를 종합하여 플레이어의 페르소나 캐릭터 생성. 말투까지 모방.
    *   **입력**: 모든 대화 로그, 최종 `playerAnalysis` 데이터.
    *   **출력**: 최종 페르소나 캐릭터 정보 JSON.

###**3단계: 게임 진행 로직 구현**

위 설계에 따라 실제 게임 플로우를 서버와 클라이언트에 구현합니다.

1.  **회원가입/로그인**: 기존 로직 유지.
2.  **최초 로그인**:
    *   서버: `playerAnalysis` 필드가 null인지 확인.
    *   클라이언트: null이면 `InitialCounselingPage`로 라우팅.
    *   `[AI-1]`을 통해 상담 진행. 종료 후 로그를 서버에 전송.
    *   서버: `[AI-2]`로 로그 분석 후 `playerAnalysis` 업데이트. 첫 캐릭터(애벌레) 생성 및 `GameState` 초기화.
3.  **메인 게임 루프 (밤)**:
    *   클라이언트: `GamePlayPage`에서 `[AI-3]`과 대화.
    *   대화 종료 시(캐릭터의 이야기가 일단락되면), 서버에 종료 요청.
4.  **이야기 종료 및 낮 전환**:
    *   서버:
        1.  해당 캐릭터 대화 로그로 `[AI-4]`, `[AI-5]` 호출 -> `CharacterCard`, `EmotionPiece` 생성 및 저장.
        2.  `GameState`를 'day'로 변경, `lastInteractionTime` 기록.
    *   클라이언트:
        1.  새로 생성된 `CharacterCard` 표시.
        2.  `PsychologyTestPage`로 전환. 5개의 심리 질문 제시.
        3.  (백그라운드) 서버는 다음 밤을 준비.
5.  **밤 준비 과정 (서버, 클라이언트가 심리테스트 하는 동안)**:
    1.  `[AI-6]` 호출: `playerAnalysis` 업데이트 및 다음 캐릭터 요소 추출.
    2.  `[AI-7]` 호출: 새 캐릭터 생성.
    3.  `[AI-8]` 호출: 캐릭터 이미지 생성.
    4.  이미지 도트 변환 알고리즘 실행 후 `pixelatedImageUrl` 저장.
    5.  모든 정보와 함께 새 `Character`를 DB에 저장.
6.  **새로운 밤 시작**:
    *   클라이언트: 심리 질문 답변 완료 및 서버의 준비 완료 신호 수신 후 `GamePlayPage`로 복귀.
    *   새 캐릭터의 `initialDialogue`가 표시되며 루프 반복.
7.  **시간 스킵**:
    *   밤: 대화 종료 후 '아침으로 가기' 버튼 활성화.
    *   낮: `lastInteractionTime`에서 1시간 경과 후 '밤으로 가기' 버튼 활성화 (단, 서버 준비가 끝나야 함).
8.  **최종장 (9번째 캐릭터 이후)**:
    *   `[AI-11]`을 통해 페르소나 캐릭터 생성.
    *   마지막 이야기 진행.
    *   종료 후 `EndingPage`로 이동. 모든 상호작용 비활성화, 캐릭터 카드 목록만 조회 가능.

### **4단계: UI/UX 리디자인**

*   **전체 테마**: 파스텔 톤의 따뜻하고 몽환적인 동화풍 디자인.
*   **Day/Night 모드**: `GameContext`에 `timeOfDay` 상태를 추가하고, 이를 기반으로 최상위 컴포넌트의 클래스를 변경하여 CSS 변수로 색상 팔레트를 전환합니다.
    *   `styles/base.scss`에 `:root`와 `[data-theme='night']` 선택자를 사용하여 두 가지 색상 테마 정의.
*   **레이아웃 (`MainLayout.tsx`)**:
    *   **상단**: 게임 시간(실시간 업데이트), 'n일차' 표시.
    *   **기억 조각**: 상단 바 아래에 수집한 `EmotionPiece`를 아이콘 형태로 표시.
    *   **메뉴**: 우상단 햄버거 메뉴 -> `PersonaCollectionPage` (캐릭터 카드 목록), `CounselingPage` (수시 상담)로 이동하는 링크.
*   **컴포넌트**:
    *   `CharacterCard.tsx`: 새로운 디자인 적용.
    *   `PsychologyTestPage.tsx`: 심리 질문을 보여주는 페이지 신규 제작.
    *   `ChatInterface.tsx`: Day/Night 테마가 적용되도록 스타일 수정.