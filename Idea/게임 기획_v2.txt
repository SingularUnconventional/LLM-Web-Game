### **1단계: 프로젝트 구조 및 데이터베이스 리모델링**

기존 구조를 최대한 활용하되, 새로운 게임 로직을 담을 수 있도록 모델을 재설계하고 추가합니다.

**수정/추가될 모델 (`server/models/`):**

*   **`User.ts`**:
    *   `playerAnalysis: JSON` 필드를 추가합니다. 플레이어 분석 데이터가 저장됩니다. (초기값은 null)
    *   `completedCharacterCount: number` 필드를 추가합니다. 클리어한 캐릭터 수를 추적합니다.
*   **`Character.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `name: string`
    *   `description: string` (캐릭터 설명 및 배경 이야기)
    *   `problem: string` (캐릭터의 핵심 고민)
    *   `personality: string`
    *   `initialDialogue: string` (캐릭터의 첫 대사)
    *   `originalImageUrl: string` (Gemini 생성 원본 이미지 URL)
    *   `pixelatedImageUrl: string` (도트 변환 이미지 URL)
    *   `isFixed: boolean` (고정 캐릭터 여부, 예: 애벌레)
    *   `isFinalPersona: boolean` (최종 페르소나 여부)
    *   `createdAt: Date`
*   **`ConversationLog.ts` (신규 생성)**:
    *   `characterId: string` (FK to Character)
    *   `speaker: 'user' | 'character'`
    *   `message: string`
    *   `timestamp: Date`
    *   `gameDay: number` (게임 내 날짜)
*   **`CharacterCard.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `characterId: string` (FK to Character)
    *   `summary: string` (AI 요약 내용)
    *   `outcome: string` (결말)
    *   `pixelatedImageUrl: string`
*   **`EmotionPiece.ts` (기존 모델 수정 또는 신규 생성)**:
    *   `characterCardId: string` (FK to CharacterCard)
    *   `keyword: string` (추출된 감정 키워드)
*   **`CounselingLog.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `speaker: 'user' | 'ai'`
    *   `message: string`
    *   `timestamp: Date`
*   **`PsychologyAnswer.ts` (신규 생성)**:
    *   `userId: string` (FK to User)
    *   `question: string`
    *   `answer: string`
*   **`GameState.ts` (GameSession.ts 대체 또는 대폭 수정)**:
    *   `userId: string` (FK to User)
    *   `currentDay: number`
    *   `timeOfDay: 'day' | 'night'`
    *   `activeCharacterId: string | null` (현재 대화 중인 캐릭터)
    *   `lastInteractionTime: Date` (시간 스킵 기능에 사용)

### **2단계: AI 모델 및 프롬포트 설계**

게임의 핵심인 AI 모델의 역할과 프롬포트를 명확히 정의합니다. `server/prompts/` 폴더에 프롬포트 템플릿을 저장하고 `server/services/geminiService.ts`에서 각 모델을 호출하는 함수를 구현합니다.

*   **`[AI-CORE] 캐릭터 프롬포트 코어 템플릿`**: 모든 캐릭터 AI가 공유하는 기본 규칙, 서식, 금지 항목 등을 정의합니다.
*   **`[AI-1] 최초 상담 AI`**:
    *   **역할**: 신규 유저와 10~50턴 간의 초기 심리 상담 진행.
    *   **입력**: 없음.
    *   **출력**: 상담 대화.
*   **`[AI-2] 최초 상담 분석 AI`**:
    *   **역할**: `[AI-1]`의 상담 로그를 분석하여 초기 `playerAnalysis` 데이터 생성.
    *   **입력**: 최초 상담 로그.
    *   **출력**: JSON 형태의 플레이어 분석 데이터 (성향, 주요 관심사, 가치관 등).
*   **`[AI-3] 캐릭터 대화 AI`**:
    *   **역할**: 생성된 캐릭터가 되어 플레이어와 대화.
    *   **입력**: `[AI-CORE]` + 개별 캐릭터 정보(성격, 고민, 배경) + 대화 로그.
    *   **출력**: 캐릭터의 다음 대사.
*   **`[AI-4] 대화 요약 AI`**:
    *   **역할**: 종료된 캐릭터와의 대화 로그를 요약하여 캐릭터 카드 정보 생성.
    *   **입력**: 한 캐릭터와의 전체 대화 로그.
    *   **출력**: 캐릭터의 성격, 고민, 결말에 대한 간략한 요약.
*   **`[AI-5] 감정 조각 추출 AI`**:
    *   **역할**: `[AI-4]`의 결과물(고민, 결말)을 바탕으로 가장 핵심적인 감정 키워드 1~2개 추출.
    *   **입력**: 요약된 고민과 결말 텍스트.
    *   **출력**: 감정 키워드 (예: "아쉬움", "성취감").
*   **`[AI-6] 플레이어 심층 분석 AI`**:
    *   **역할**: 기존 분석 데이터, 이전 캐릭터 대화 로그, 심리 질문 답변을 종합하여 `playerAnalysis`를 업데이트하고, 다음 캐릭터 생성을 위한 핵심 요소 추출.
    *   **입력**: 기존 `playerAnalysis` 데이터, 최근 대화 로그, 심리 질문 답변 목록, 현재 게임 진행도(n일차).
    *   **출력**: 1. 업데이트된 `playerAnalysis` JSON. 2. 다음 캐릭터의 핵심 요소(problem) 텍스트.
*   **`[AI-7] 동화 캐릭터 생성 AI`**:
    *   **역할**: `[AI-6]`이 추출한 핵심 요소를 동화적 상상력으로 변환하여 새로운 캐릭터 생성.
    *   **입력**: 캐릭터 핵심 요소.
    *   **출력**: 캐릭터 정보(이름, 설명, 고민, 성격, 첫 대사) JSON.
*   **`[AI-8] 프로필 이미지 생성 AI`**:
    *   **역할**: 생성된 캐릭터 정보를 바탕으로 프로필 이미지 생성.
    *   **프롬포트**: "A close-up portrait of [캐릭터 설명], simple fairy tale illustration style, plain white background, facing forward."
    *   **출력**: 이미지 URL.
*   **`[AI-9] 수시 상담 AI`**:
    *   **역할**: 유저가 원할 때 언제든 진행하는 상담. 턴 수 제한 없음.
    *   **입력**: 이전 수시 상담 로그.
    *   **출력**: 상담 대화.
*   **`[AI-10] 수시 상담 분석 AI`**:
    *   **역할**: `[AI-9]`의 로그를 분석하여 `playerAnalysis` 데이터에 추가. `[AI-2]`와 유사하지만, 기존 데이터에 정보를 추가/갱신하는 방식.
    *   **입력**: 수시 상담 로그, 기존 `playerAnalysis` 데이터.
    *   **출력**: 업데이트된 `playerAnalysis` JSON.
*   **`[AI-11] 최종 페르소나 생성 AI`**:
    *   **역할**: 9번째 캐릭터 클리어 후, 모든 데이터를 종합하여 플레이어의 페르소나 캐릭터 생성. 말투까지 모방.
    *   **입력**: 모든 대화 로그, 최종 `playerAnalysis` 데이터.
    *   **출력**: 최종 페르소나 캐릭터 정보 JSON.

### **3단계: 게임 진행 로직 구현**

위 설계에 따라 실제 게임 플로우를 서버와 클라이언트에 구현합니다.

1.  **회원가입/로그인**: 기존 로직 유지.
2.  **최초 로그인**:
    *   서버: `playerAnalysis` 필드가 null인지 확인.
    *   클라이언트: null이면 `InitialCounselingPage`로 라우팅.
    *   `[AI-1]`을 통해 상담 진행. 종료 후 로그를 서버에 전송.
    *   서버: `[AI-2]`로 로그 분석 후 `playerAnalysis` 업데이트. 첫 캐릭터(애벌레) 생성 및 `GameState` 초기화.
3.  **메인 게임 루프 (밤)**:
    *   클라이언트: `GamePlayPage`에서 `[AI-3]`과 대화.
    *   대화 종료 시(캐릭터의 이야기가 일단락되면), 서버에 종료 요청.
4.  **이야기 종료 및 낮 전환**:
    *   서버:
        1.  해당 캐릭터 대화 로그로 `[AI-4]`, `[AI-5]` 호출 -> `CharacterCard`, `EmotionPiece` 생성 및 저장.
        2.  `GameState`를 'day'로 변경, `lastInteractionTime` 기록.
    *   클라이언트:
        1.  새로 생성된 `CharacterCard` 표시.
        2.  `PsychologyTestPage`로 전환. 5개의 심리 질문 제시.
        3.  (백그라운드) 서버는 다음 밤을 준비.
5.  **밤 준비 과정 (서버, 클라이언트가 심리테스트 하는 동안)**:
    1.  `[AI-6]` 호출: `playerAnalysis` 업데이트 및 다음 캐릭터 요소 추출.
    2.  `[AI-7]` 호출: 새 캐릭터 생성.
    3.  `[AI-8]` 호출: 캐릭터 이미지 생성.
    4.  이미지 도트 변환 알고리즘 실행 후 `pixelatedImageUrl` 저장.
    5.  모든 정보와 함께 새 `Character`를 DB에 저장.
6.  **새로운 밤 시작**:
    *   클라이언트: 심리 질문 답변 완료 및 서버의 준비 완료 신호 수신 후 `GamePlayPage`로 복귀.
    *   새 캐릭터의 `initialDialogue`가 표시되며 루프 반복.
7.  **시간 스킵**:
    *   밤: 대화 종료 후 '아침으로 가기' 버튼 활성화.
    *   낮: `lastInteractionTime`에서 1시간 경과 후 '밤으로 가기' 버튼 활성화 (단, 서버 준비가 끝나야 함).
8.  **최종장 (9번째 캐릭터 이후)**:
    *   `[AI-11]`을 통해 페르소나 캐릭터 생성.
    *   마지막 이야기 진행.
    *   종료 후 `EndingPage`로 이동. 모든 상호작용 비활성화, 캐릭터 카드 목록만 조회 가능.

### **4단계: UI/UX 리디자인**

*   **전체 테마**: 파스텔 톤의 따뜻하고 몽환적인 동화풍 디자인.
*   **Day/Night 모드**: `GameContext`에 `timeOfDay` 상태를 추가하고, 이를 기반으로 최상위 컴포넌트의 클래스를 변경하여 CSS 변수로 색상 팔레트를 전환합니다.
    *   `styles/base.scss`에 `:root`와 `[data-theme='night']` 선택자를 사용하여 두 가지 색상 테마 정의.
*   **레이아웃 (`MainLayout.tsx`)**:
    *   **상단**: 게임 시간(실시간 업데이트), 'n일차' 표시.
    *   **기억 조각**: 상단 바 아래에 수집한 `EmotionPiece`를 아이콘 형태로 표시.
    *   **메뉴**: 우상단 햄버거 메뉴 -> `PersonaCollectionPage` (캐릭터 카드 목록), `CounselingPage` (수시 상담)로 이동하는 링크.
*   **컴포넌트**:
    *   `CharacterCard.tsx`: 새로운 디자인 적용.
    *   `PsychologyTestPage.tsx`: 심리 질문을 보여주는 페이지 신규 제작.
    *   `ChatInterface.tsx`: Day/Night 테마가 적용되도록 스타일 수정.
